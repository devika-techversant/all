{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\listtable 
{\list\listhybrid
{\listlevel\levelnfc0\leveljc0\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc4\leveljc0\levelstartat1{\leveltext\'02\'01.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc3\leveljc0\levelstartat1{\leveltext\'02\'02.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc2\leveljc0\levelstartat1{\leveltext\'02\'03.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc1\leveljc0\levelstartat1{\leveltext\'02\'04.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc0\leveljc0\levelstartat1{\leveltext\'02\'05.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc4\leveljc0\levelstartat1{\leveltext\'02\'06.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc3\leveljc0\levelstartat1{\leveltext\'02\'07.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc2\leveljc1\levelstartat1{\leveltext\'02\'08.;}{\levelnumbers\'01;}\jclisttab\tx0}\listid1 }
{\list\listhybrid
{\listlevel\levelnfc0\leveljc0\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc4\leveljc0\levelstartat1{\leveltext\'02\'01.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc3\leveljc0\levelstartat1{\leveltext\'02\'02.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc2\leveljc0\levelstartat1{\leveltext\'02\'03.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc1\leveljc0\levelstartat1{\leveltext\'02\'04.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc0\leveljc0\levelstartat1{\leveltext\'02\'05.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc4\leveljc0\levelstartat1{\leveltext\'02\'06.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc3\leveljc0\levelstartat1{\leveltext\'02\'07.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc2\leveljc1\levelstartat1{\leveltext\'02\'08.;}{\levelnumbers\'01;}\jclisttab\tx0}\listid2 }}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang9\par
1. Statement: \b0 A set of programming instructions are called statements.\par
\b 2. A JavaScript program \b0 is a list of programming statements.\par
\b 3. The JavaScript syntax \b0 defines two types of values:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Fixed values (Literals) - Numbers, Strings.\par
{\pntext\f1\'B7\tab}Variable values (Variables) - Variables are Containers for Storing Data\par

\pard\sa200\sl276\slmult1\b 4. Comments:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Single Line Comments \b //\b0\par
{\pntext\f1\'B7\tab}Multi-line Comments (start with \b /* \b0 and end with \b */\b0 .)\par

\pard\sa200\sl276\slmult1\b 5. Variable declaration : \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Automatically\par
{\pntext\f1\'B7\tab}Using var\par
{\pntext\f1\'B7\tab}\b Using let\par
{\pntext\f1\'B7\tab}Using const\par

\pard\sa200\sl276\slmult1 6. JavaScript Identifiers: \b0 All JavaScript variables must be identified with unique names called\b  \b0 identifiers.\par
\b 7. Types of JavaScript Operators :\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Arithmetic Operators ( +  ,  -  ,  *  ,  **  ,  /  ,  % , ++  , -- )     \ul Exponentiation ( ** ):  x**y means x\super y\nosupersub )\par
{\pntext\f1\'B7\tab}\ulnone Assignment Operators ( =  , +=  , -=  , *= , /=  , %=  , **= )\par
{\pntext\f1\'B7\tab}Comparison Operators ( == , === , != , !== , > , < , >= , <= , ? )  \ul ? is called ternary operator\ulnone\par
{\pntext\f1\'B7\tab}String Operators (String comparison (compares alphabetically) , String addition, Adding Strings and Numbers\par
{\pntext\f1\'B7\tab}Logical Operators ( && , || , ! )\par
{\pntext\f1\'B7\tab}Bitwise Operators ( & , | , ~ , ^ , << , >> , >>> )\par
{\pntext\f1\'B7\tab}Ternary Operators\par
{\pntext\f1\'B7\tab}Type Operators ( typeof , instanceof )\b\par
{\pntext\f1\'B7\tab}\b0 Nullish coalescing assignment operator is used between two values. If the first value is undefined or null, the second value is assigned.\b\par

\pard\sa200\sl276\slmult1 8. JavaScript has 8 Datatypes: \par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\b0 String\par
{\pntext\f0 2.\tab}Number\par
{\pntext\f0 3.\tab}Bigint\par
{\pntext\f0 4.\tab}Boolean\par
{\pntext\f0 5.\tab}Undefined\par
{\pntext\f0 6.\tab}Null\par
{\pntext\f0 7.\tab}Symbol\par
{\pntext\f0 8.\tab}Object\par

\pard\sa200\sl276\slmult1\par
The \b Object Datatype \b0 can contain:\par

\pard 
{\pntext\f0 i.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 An object\par
{\pntext\f0 ii.\tab}An array\par
{\pntext\f0 iii.\tab}A date\par

\pard\sa200\sl276\slmult1\b 9. Exponential Notation : \b0 Extra large or extra small numbers can be written with scientific (exponential) notation:\par
Example:\par

\pard\li720\sa200\sl276\slmult1 let y = \b 123e5\b0 ;    // 12300000\par
let z = \b 123e-5\b0 ;  \b  \b0 // 0.00123\par

\pard\sa200\sl276\slmult1\b 10. JavaScript Functions : \b0 Block of code designed to perform a particular task. JavaScript function is executed when "something" invokes it (calls it).\par

\pard\li720\sa200\sl276\slmult1\b function name(parameter1, parameter2, parameter3) \{\par
  // code to be executed\par
\}\par

\pard\sa200\sl276\slmult1 11. Calling function : \par

\pard\li720\sa200\sl276\slmult1\b0 name (value1, value2. value3,......) //calling function and passing parameters.\par

\pard\sa200\sl276\slmult1\b 12. Objects: \b0 You define (and create) a JavaScript object with an object literal:\par
Example:\par

\pard\li720\sa200\sl276\slmult1 const person = \{firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"\};\par

\pard\sa200\sl276\slmult1 The \b name:values \b0 pairs in JavaScript objects are called \b properties.\par
13. Accessing Object Properties: \b0 You can access object properties in two ways:\b\par

\pard\li720\sa200\sl276\slmult1 objectName.propertyName\par
\b0 OR\par
\b objectName["propertyName"]\par

\pard\sa200\sl276\slmult1 14. Object Methods\b0 : Methods are actions that can be performed on objects. Methods are stored in properties as \b function definitions.\par
\b0 Example\par

\pard\li720\sa200\sl276\slmult1 const person = \{\par
  firstName: "John",\par
  lastName : "Doe",\par
  id       : 5566,\par
  fullName : function() \{\tab //this is a method\par
    return this.firstName + " " + this.lastName;\par
  \}\par
\};\b\par

\pard\sa200\sl276\slmult1 15. this \b0 keyword refers to the global object. \par
Example:\par

\pard\li720\sa200\sl276\slmult1 const person = \{\par
  firstName: "John",\par
  lastName : "Doe",\par
  id       : 5566,\par
  fullName : function() \{\par
    return this.firstName + " " + this.lastName;\tab //this means person\par
  \}\par
\};\par

\pard\sa200\sl276\slmult1\b 16. HTML Events : \b0 <element event=''some JavaScript''>\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 onchange\par
{\pntext\f1\'B7\tab}onclick\par
{\pntext\f1\'B7\tab}onmouseover\par
{\pntext\f1\'B7\tab}onmouseout\par
{\pntext\f1\'B7\tab}onkeydown\par
{\pntext\f1\'B7\tab}onload\par

\pard\sa200\sl276\slmult1\b 17. Escape Character : \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 backslash (\\) escape character turns special characters into string characters: \\' ,  \\'' , \\\\\par
{\pntext\f1\'B7\tab}\\b\tab Backspace\par
{\pntext\f1\'B7\tab}\\f\tab Form Feed\par
{\pntext\f1\'B7\tab}\\n\tab New Line\par
{\pntext\f1\'B7\tab}\\r\tab Carriage Return\par
{\pntext\f1\'B7\tab}\\t\tab Horizontal Tabulator\par
{\pntext\f1\'B7\tab}\\v\tab Vertical Tabulator\par

\pard\sa200\sl276\slmult1\b 18. String Methods:\par

\pard 
{\listtext\f0 i.\tab}\ls1\ilvl8\fi-360\li720\sa200\sl276\slmult1\b0 String \b length : \b0\i variableName.length\i0\par
{\listtext\f0 ii.\tab}String\b  slice() : \b0\i variableName.slice(startIndex, endIndex)\i0\par
{\listtext\f0 iii.\tab}String \b substring() : \b0\i variableName.substring(startIndex, endIndex)\i0\par
{\listtext\f0 iv.\tab}String \b substr() : \b0\i variableName.substr(startIndex, length)\i0\par
{\listtext\f0 v.\tab}String \b replace() : \b0\i variableName.replace("StringToReplace, "StringToBeReplacedWith")\i0\par
{\listtext\f0 vi.\tab}String \b replaceAll() : \b0\i variableName.replaceAll(StringToReplace, "StringToBeReplacedWith") //Replace all the similar strings \i0\line\ul The replaceAll() method allows you to specify a regular expression instead of a string to be replaced\b .\ulnone\b0\par
{\listtext\f0 vii.\tab}String \b toUpperCase() : \b0\i variableName.toUpperCase()\i0\par
{\listtext\f0 viii.\tab}String \b toLowerCase()  : \b0\i variableName.toLowerCase()\i0\par
{\listtext\f0 ix.\tab}String \b concat() : \b0\i variableName1.concat(" ", variableName2)\par
{\listtext\f0 x.\tab}\i0 String \b trim() : \b0\i The trim() method removes whitespace from both sides of a string. variableName.trim() \par
{\listtext\f0 xi.\tab}\i0 String \b trimStart() : \b0\i removes whitespace only from the start of a string.\par
{\listtext\f0 xii.\tab}\i0 String \b trimEnd() : \b0\i removes whitespace only from the end of a string.\par
{\listtext\f0 xiii.\tab}\i0 String \b padStart() : \b0\i pads a string from the start. \i0 va\i riableName.padStart(NumberOfPadding, "WhatToPadWith")\par
{\listtext\f0 xiv.\tab}\i0 String \b padEnd() :  \b0\i pads a string from the end.. variableName.padStart(NumberOfPadding, "WhatToPadWith")\i0\par
{\listtext\f0 xv.\tab}String \b charAt() : \b0\i charAt(position)\i0\par
{\listtext\f0 xvi.\tab}String \b charCodeAt() : \b0\i charCodeAt(position)\par
{\listtext\f0 xvii.\tab}\i0 String \b split() : String\b0  can be \b converted to \b0 an \b array \b0 with the split() method:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 text.split(",")    // Split on commas\par
{\pntext\f1\'B7\tab}text.split(" ")    // Split on spaces\par
{\pntext\f1\'B7\tab}text.split("|")    // Split on pipe\par

\pard\sa200\sl276\slmult1\b 19. String Search: \par

\pard 
{\listtext\f0 i.\tab}\ls2\ilvl8\fi-360\li720\sa200\sl276\slmult1\b0 String \b indexOf() : \b0\i variableName.indexOf("StringWhoseIndexToFind");  - \i0\{The indexOf() method cannot take powerful search values (regular expressions).\}\b\par
{\listtext\f0 ii.\tab}\b0 String \b lastIndexOf() : \b0\i variableName.lastindexOf("StringWhoseIndexToFind");\b\i0\par
{\listtext\f0 iii.\tab}\b0 String \b search() : \b0\i variableName.search("StringWhoseIndexToFind"); \{The search() method cannot take a second start position argument.\}\b\i0\par
{\listtext\f0 iv.\tab}\b0 String \b match() : \b0\i variableName.match("StringToMatch"); \b\i0\par
{\listtext\f0 v.\tab}\b0 String \b matchAll() : \b0\i variableName.matchAll("StringToMatch"); \b\i0\par
{\listtext\f0 vi.\tab}\b0 String \b includes() : \b0\i variableName.match("StringToCheckIfIncludes"); \b\i0\par
{\listtext\f0 vii.\tab}\b0 String \b startsWith() : \b0\i variableName.startsWith("StringToCheckIfStartsWith"); \b\i0\par
{\listtext\f0 viii.\tab}\b0 String \b endsWith() : \b0\i variableName.endsWith("StringToCheckIfEndsWith"); \b\i0\par

\pard\sa200\sl276\slmult1 20. JavaScript BigInt \b0 variables are used to store big integer values that are too big to be represented by a normal JavaScript Number. (JavaScript \b integers \b0 are only accurate up to \b 15 digits\b0 ).\par
\b 21. JavaScript Number Methods: \par

\pard 
{\pntext\f0 i.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 toString() : \b0 Returns a number as a \b string\par
{\pntext\f0 ii.\tab}toExponential() : \b0 Returns a number written in \b exponential notation\b0\par
{\pntext\f0 iii.\tab}\b toFixed() : \b0 Returns a number written with a \b number of decimals\par
{\pntext\f0 iv.\tab}toPrecision() : \b0 Returns a number written with a \b specified length\b0\par
{\pntext\f0 v.\tab}\b ValueOf() : \b0 Returns a number as a \b number\b0\par

\pard\sa200\sl276\slmult1\b 22. Converting Variables to Numbers:\par

\pard 
{\pntext\f0 i.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 Number() : \b0 Returns a number converted from its argument.\par
{\pntext\f0 ii.\tab}\b parseFloat() : \b0 Parses its argument and returns a floating point number\par
{\pntext\f0 iii.\tab}\b parseInt() : \b0 Parses its argument and returns a whole number\par

\pard\sa200\sl276\slmult1\b 23. Number Object Methods:\par

\pard 
{\pntext\f0 i.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 Number.isInteger(): \b0 Returns true if the argument is an integer\par
{\pntext\f0 ii.\tab}\b Number.isSafeInteger(): \b0 Returns true if the argument is a safe integer\par
{\pntext\f0 iii.\tab}\b Number.parseFloat() : \b0\tab Converts a string to a number\par
{\pntext\f0 iv.\tab}\b Number.parseInt() : \b0 Converts a string to a whole number\i\par

\pard\sa200\sl276\slmult1\b\i0 24.  JavaScript Number Properties: \b0\par

\pard 
{\pntext\f0 i.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 EPSILON\tab The difference between 1 and the smallest number > 1.\par
{\pntext\f0 ii.\tab}MAX_VALUE\tab The largest number possible in JavaScript\par
{\pntext\f0 iii.\tab}MIN_VALUE\tab The smallest number possible in JavaScript\par
{\pntext\f0 iv.\tab}MAX_SAFE_INTEGER\tab The maximum safe integer (253 - 1)\par
{\pntext\f0 v.\tab}MIN_SAFE_INTEGER\tab The minimum safe integer -(253 - 1)\par
{\pntext\f0 vi.\tab}POSITIVE_INFINITY\tab Infinity (returned on overflow)\par
{\pntext\f0 vii.\tab}NEGATIVE_INFINITY\tab Negative infinity (returned on overflow)\par
{\pntext\f0 viii.\tab}NaN\tab A "Not-a-Number" value\i\par

\pard\sa200\sl276\slmult1\b\i0 25. Arrays : \b0 Array and its value are objects. An array is a special variable, which can hold more than one value:\par
Example:\par

\pard\li720\sa200\sl276\slmult1 const cars = ["Saab", "Volvo", "BMW"];\par

\pard\sa200\sl276\slmult1\b 26. Accessing Array Elements : \b0 You access an array element by referring to the index number:\par
Example:\par

\pard\li720\sa200\sl276\slmult1 const cars = ["Saab", "Volvo", "BMW"];\par
let car = cars[0];\par

\pard\sa200\sl276\slmult1\b 27. Changing an Array Element : \par
\b0 Example: This statement changes the value of the first element in cars:\par

\pard\li720\sa200\sl276\slmult1 cars[0] = "Opel";\par

\pard\sa200\sl276\slmult1\b 28. Converting an Array to a String: \b0 The JavaScript method \b toString() \b0 converts an array to a \b string of (comma separated)\b0  array values.\par
\b 29. The Difference Between Arrays and Objects : \b0 In JavaScript, arrays use numbered indexes. In JavaScript, objects use named indexes.\par
\b 30. Array Methods :\par

\pard 
{\pntext\f0 i.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\b0 Array\b  length : \b0\i arrayName.length\b\par
{\pntext\f0 ii.\tab}\b0\i0 Array\b  toString() : \b0\i arrayName.toString\b\i0\par
{\pntext\f0 iii.\tab}\b0 Array\b  pop() : \b0\i arrayName.pop() - \i0 Popping items out of an array (end).\b\par
{\pntext\f0 iv.\tab}\b0 Array\b  push() : \b0\i arrayName.push() - \i0 Pushing items into an array (end).\b\par
{\pntext\f0 v.\tab}\b0 Array\b  shift() : \b0\i arrayName.shift() - \i0 Removes the first array element and "shifts" all other elements to a lower index.\b\par
{\pntext\f0 vi.\tab}\b0 Array\b  unshift() : \b0\i arrayName.unshift("ElementToAdd") - \i0 Adds a new element to an array (at the beginning), and "unshifts" older elements.\b\par
{\pntext\f0 vii.\tab}\b0 Array \b join() : \b0\i arrayName.join ("Separator") -\b\i0  \b0 The join() method also joins all array elements into a string. It behaves just like toString(), but in addition you can specify the separator.\par
{\pntext\f0 viii.\tab}Array\b  delete() : \b0\i delete arrayName[position]; - \i0 Using delete leaves undefined holes in the array.\par
{\pntext\f0 ix.\tab}Array \b concat() : \b0\i array1.concat(array2, array3, array4, .....);\i0\par
{\pntext\f0 x.\tab}Array\b  flat()  : \b0 The flat() method creates a new array with sub-array elements concatenated to a specified depth.\line Example : \b\line\b0\i const myArr = [[1,2],[3,4],[5,6]];\line const newArr = myArr.flat(); // [1,2,3,4,5,6]\par
{\pntext\f0 xi.\tab}\i0 Array\b  splice(): \b0\i arrayName.splice(positionWhereNewElementsShouldBeAdded, numberOfElementsToRemove, NewElementToBeAdded1, NewElementToBeAdded2, ....)\b\i0\par
{\pntext\f0 xii.\tab}\b0 Array\b  slice(): \b0\i arrayName.slice(IndexFromWhereToStartSlicing)\par

\pard\sa200\sl276\slmult1\b\i0 31. Sorting an Array: \par

\pard 
{\pntext\f0 i.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 sort():\b0\i\line const fruits = ["Banana", "Orange", "Apple", "Mango"];\line fruits.sort();\par
{\pntext\f0 ii.\tab}\b\i0 reverse():\b0\i\line const fruits = ["Banana", "Orange", "Apple", "Mango"];\line fruits.sort();\line fruits.reverse();\par
{\pntext\f0 iii.\tab}\b\i0 Numeric Sort using compare function:\b0\i\line const points = [40, 100, 1, 5, 25, 10];\line points.sort(function(a, b)\{return a - b\});\b\i0\par
{\pntext\f0 iv.\tab}Sorting an Array in Random Order:\line\b0\i const points = [40, 100, 1, 5, 25, 10];\line points.sort(function()\{return 0.5 - Math.random()\});\i0\par
{\pntext\f0 v.\tab}\b Math.max.apply \b0 to find the highest number in an array.\line\i Math.max.apply(null, arrayName)\i0\par
{\pntext\f0 vi.\tab}\b Math.min.apply \b0 to find the lowest number in an array.\line\i Math.min.apply(null, arrayName)\i0\par
{\pntext\f0 vii.\tab}\b Sorting Object Arrays: \b0\line Example:\line\tab const cars = [\line\tab\tab\{type:"Volvo", year:2016\},\line  \tab\tab\{type:"Saab", year:2001\},\line  \tab\tab\{type:"BMW", year:2010\}\line\tab ];\line\tab To sort:\line\tab\tab cars.sort(function(a, b)\{return a.year - b.year\});\par

\pard\sa200\sl276\slmult1\b 32. Array Iteration: \b0 Array iteration methods operate on every array item.\par

\pard 
{\pntext\f0 i.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pnlcrm{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\b forEach() \b0 method calls a function (a callback function) once for each array element.\line function takes 3 arguments: The item \b value\b0 , The item \b index\b0  and The \b array \b0 itself.\par
{\pntext\f0 ii.\tab}\b map() \b0 method creates a new array by performing a function on each array element. function takes 3 arguments: The item \b value\b0 , The item \b index\b0  and The \b array \b0 itself.\par
{\pntext\f0 iii.\tab}\b flatMap() \b0 method first maps all elements of an array and then creates a new array by flattening the array.\par
{\pntext\f0 iv.\tab}\b filter() \b0 method creates a new array with array elements that pass a test. function takes 3 arguments: The item \b value\b0 , The item \b index\b0  and The \b array \b0 itself.\par
{\pntext\f0 v.\tab}\b reduce() \b0 method runs a function on each array element to produce (reduce it to) a single value. function takes 4 arguments: The \b total\b0  (the initial value / previously returned value), The item \b value\b0 , The item \b index\b0  and The \b array \b0 itself.\par
{\pntext\f0 vi.\tab}\b every() \b0 method checks if all array values pass a test. function takes 3 arguments: The item \b value\b0 , The item \b index\b0  and The \b array \b0 itself.\par
{\pntext\f0 vii.\tab}\b some() \b0 method checks if some array values pass a test. function takes 3 arguments: The item \b value\b0 , The item \b index\b0  and The \b array \b0 itself.\par
{\pntext\f0 viii.\tab}\b find() \b0 method returns the value of the first array element that passes a test function. function takes 3 arguments: The item \b value\b0 , The item \b index\b0  and The \b array \b0 itself.\par
{\pntext\f0 ix.\tab}\b findIndex() \b0 method returns the index of the first array element that passes a test function. function takes 3 arguments: The item \b value\b0 , The item \b index\b0  and The \b array \b0 itself.\par
{\pntext\f0 x.\tab}\b from(): \b0 The Array.from() method returns an Array object from any object with a length property or any iterable object.\line Example\line\tab Create an Array from a String:\line\tab\tab Array.from("ABCDEFG");\par
{\pntext\f0 xi.\tab}\b keys() \b0 method returns an Array Iterator object with the keys of an array.\par
{\pntext\f0 xii.\tab}\b entries() \b0 create an Array Iterator, and then iterate over the key/value pairs.\par
{\pntext\f0 xiii.\tab}\b includes() \b0 allows us to check if an element is present in an array (including NaN, unlike indexOf). \tab\i array.includes(search-item)\i0\par
{\pntext\f0 xiv.\tab}\i The \b ...\b0  operator expands an iterable (like an array) into more elements.\i0\par

\pard\sa200\sl276\slmult1\i 33. \par
\par
\par
\par
<!DOCTYPE html>\par
<html>\par
<head>\par
    <title>Print Numbers</title>\par
</head>\par
<body>\par
    <button onclick="printNumbers()">Print Numbers</button>\par
    <div id="output"></div>\par
\par
    <script>\par
        function printNumbers() \{\par
            var number = 1;\par
\par
            function printNumber() \{\par
                document.getElementById('output').innerHTML += number + '<br>';\par
                number++;\par
                if (number <= 100) \{\par
                    setTimeout(printNumber, 10);\par
                \}\par
            \}\par
\par
            printNumber();\par
        \}\par
    </script>\par
</body>\par
</html>\par
In this program, we have a function printNumbers() that is called when the button is clicked. Inside this function, we define a variable number and set it to 1.\par
\par
Then, we define an inner function called printNumber(). This function is responsible for printing the current value of number, incrementing it, and recursively calling itself until the value of number reaches 100. Each time the function is called, it adds the current value of number to the <div> element with the id output, followed by a line break (<br>).\par
\par
The setTimeout() function is used to introduce a small delay (10 milliseconds in this case) between each call to printNumber(), allowing the numbers to be printed one at a time.\par
\par
When you click the "Print Numbers" button, it will start printing the numbers from 1 to 100 on the HTML page, using recursion instead of a loop.\par
\par
\par
\par
\par
--------------------------------------------------------------\par
\par
Create an HTML file with the following content:\par
html\par
Copy code\par
<!DOCTYPE html>\par
<html>\par
<head>\par
  <title>Count Notes</title>\par
</head>\par
<body>\par
  <h1>Count Notes</h1>\par
  <label for="amount">Enter the amount:</label>\par
  <input type="number" id="amount" min="0" step="0.01">\par
  <button onclick="countNotes()">Count</button>\par
  <p id="result"></p>\par
\par
  <script src="script.js"></script>\par
</body>\par
</html>\par
Create a JavaScript file named "script.js" in the same directory as the HTML file, and add the following code:\par
javascript\par
Copy code\par
function countNotes() \{\par
  var amount = parseFloat(document.getElementById('amount').value);\par
  var notes = [2000, 500, 200, 100, 50, 20, 10, 5, 2, 1]; // List of available note denominations\par
  var counts = \{\};\par
\par
  for (var i = 0; i < notes.length; i++) \{\par
    var note = notes[i];\par
    var count = Math.floor(amount / note);\par
    amount -= count * note;\par
    counts[note] = count;\par
  \}\par
\par
  var resultElement = document.getElementById('result');\par
  resultElement.innerHTML = '';\par
\par
  for (var note in counts) \{\par
    if (counts.hasOwnProperty(note)) \{\par
      var count = counts[note];\par
      if (count > 0) \{\par
        var noteString = count + ' x ' + note + ' notes';\par
        resultElement.innerHTML += noteString + '<br>';\par
      \}\par
    \}\par
  \}\par
\}\par
Save both the HTML and JavaScript files in the same directory.\par
\par
Open the HTML file in a web browser, and you should see an input field to enter the amount and a "Count" button. When you enter an amount and click the "Count" button, the result will be displayed below the button.\par
\par
The JavaScript code calculates the number of notes required for the given amount using the available note denominations. It then updates the HTML page with the result.\par
\par
Please note that the denominations used in the code are just an example and can be customized according to your requirements.\i0\par

\pard\li1440\sa200\sl276\slmult1\i\par

\pard\sa200\sl276\slmult1\par
\par
\par
\par
\i0\par
}
 